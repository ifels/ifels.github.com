<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on ifels&#39;s blog</title>
    <link>http://ifels.github.io/categories/code/</link>
    <description>Recent content in Code on ifels&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://ifels.github.io/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lua OOP 实现</title>
      <link>http://ifels.github.io/post/lua-opp/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ifels.github.io/post/lua-opp/</guid>
      <description>

&lt;p&gt;使用lua 模拟面向对象编程.&lt;/p&gt;

&lt;h2 id=&#34;lua-oop-实现:b6c28b435c99e79032b9bfb6ad4a1f4d&#34;&gt;lua OOP 实现&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function clone(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= &amp;quot;table&amp;quot; then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local new_table = {}
        lookup_table[object] = new_table
        for key, value in pairs(object) do
            new_table[_copy(key)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end
    return _copy(object)
end

function class(classname, super)
    local superType = type(super)
    local cls

    if superType ~= &amp;quot;function&amp;quot; and superType ~= &amp;quot;table&amp;quot; then
        superType = nil
        super = nil
    end

    if superType == &amp;quot;function&amp;quot; or (super and super.__ctype == 1) then
        -- inherited from native C++ Object
        cls = {}

        if superType == &amp;quot;table&amp;quot; then
            -- copy fields from super
            for k,v in pairs(super) do cls[k] = v end
            cls.__create = super.__create
            cls.super    = super
        else
            cls.__create = super
        end

        cls.ctor    = function() end
        cls.__cname = classname
        cls.__ctype = 1

        function cls.new(...)
            local instance = cls.__create(...)
            -- copy fields from class to native object
            for k,v in pairs(cls) do instance[k] = v end
            instance.class = cls
            instance:ctor(...)
            return instance
        end

    else
        -- inherited from Lua Object
        if super then
            cls = {}
            setmetatable(cls, {__index = super})
            cls.super = super
            if not cls.ctor then
                cls.ctor = function()
                    local parent = cls.super
                    while(parent) do
                        parent.ctor(self)
                        parent = parent.super
                    end
                end
            end
        else
            cls = {ctor = function() end}
        end

        cls.__cname = classname
        cls.__ctype = 2 -- lua
        cls.__index = cls

        function cls.new(...)
            local instance = setmetatable({}, cls)
            instance.class = cls
            instance:ctor(...)
            return instance
        end
    end

    return cls
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用示例:b6c28b435c99e79032b9bfb6ad4a1f4d&#34;&gt;使用示例&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Base = class(&amp;quot;Base&amp;quot;)

function Base:dump()
    print(&amp;quot;Base.a = &amp;quot; .. tostring(self.a))
end

function Base:ctor()
    self.a = 1
    self.b = &amp;quot;b&amp;quot;
end

function Base:setA(a)
    self.a = a
end

Sub1 = class(&amp;quot;Sub1&amp;quot;, Base)

function Sub1:setA(a)
    self.a = a
end

function Sub1:dump()
    self.super.dump(self)
    print(&amp;quot;Sub.a = &amp;quot; .. tostring(self.a))
end

--[[
function Sub1:ctor()
    self.super.ctor(self)
end
]]--

Sub2 = class(&amp;quot;Sub2&amp;quot;, Base)
function Sub2:setA(a)
    self.super.setA(self, a)
end

function Sub2:dump()
    self.super.dump(self)
    print(&amp;quot;Sub2.a = &amp;quot; .. tostring(self.a))
end

function Sub2:ctor()
    self.super.ctor(self)
end

base1 = Base:new()
base2 = Base:new()
base1:setA(3)
base1:dump()
base2:dump()

print(&amp;quot;----------&amp;quot;)

sub1 = Sub1:new()
sub2 = Sub2:new()

sub1:dump()
sub2:dump()

print(&amp;quot;----------&amp;quot;)

sub1:setA(2)
sub2:setA(3)

sub1:dump()
sub2:dump()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：调用父类方法时，使用self.spuer.method(self, &amp;hellip;), 不要使用self.spuer:method(&amp;hellip;)。 这样可以保证父类和子类的self是同一个。&lt;/p&gt;

&lt;p&gt;参考自：&lt;a href=&#34;https://github.com/cocos2d/cocos2d-x/blob/v3/cocos/scripting/lua-bindings/script/extern.lua&#34;&gt;cocos2d-x&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>